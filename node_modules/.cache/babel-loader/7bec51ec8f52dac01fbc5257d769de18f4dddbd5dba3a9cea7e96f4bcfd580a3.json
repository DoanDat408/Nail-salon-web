{"ast":null,"code":"// axiosInstance.js\nimport axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:5118/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor để tự động làm mới token khi gặp lỗi 401\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n\n  // Kiểm tra lỗi 401 và chưa thực hiện refresh token\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    const refreshToken = localStorage.getItem('refreshToken');\n\n    // Nếu có refreshToken, gọi API để làm mới accessToken\n    if (refreshToken) {\n      try {\n        const response = await axios.post('http://localhost:5118/api/Auth/refresh-token', {\n          refreshToken: refreshToken\n        });\n\n        // Lưu lại accessToken mới\n        const newAccessToken = response.data.accessToken;\n        localStorage.setItem('token', newAccessToken);\n\n        // Cập nhật Authorization header với accessToken mới\n        originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\n\n        // Thử lại request với token mới\n        return api(originalRequest);\n      } catch (err) {\n        console.error('Failed to refresh token:', err);\n        // Nếu không làm mới được token, chuyển hướng về trang đăng nhập\n        window.location.href = '/login';\n        return Promise.reject(error);\n      }\n    } else {\n      // Nếu không có refreshToken, chuyển hướng về trang đăng nhập\n      window.location.href = '/login';\n      return Promise.reject(error);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","response","use","error","originalRequest","config","status","_retry","refreshToken","localStorage","getItem","post","newAccessToken","data","accessToken","setItem","err","console","window","location","href","Promise","reject"],"sources":["C:/Users/RTD0224/source/repos/nail-salon-web/src/components/axiosInstance.js"],"sourcesContent":["// axiosInstance.js\r\nimport axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:5118/api',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n// Interceptor để tự động làm mới token khi gặp lỗi 401\r\napi.interceptors.response.use(\r\n    response => response,\r\n    async (error) => {\r\n        const originalRequest = error.config;\r\n\r\n        // Kiểm tra lỗi 401 và chưa thực hiện refresh token\r\n        if (error.response && error.response.status === 401 && !originalRequest._retry) {\r\n            originalRequest._retry = true;\r\n            const refreshToken = localStorage.getItem('refreshToken');\r\n\r\n            // Nếu có refreshToken, gọi API để làm mới accessToken\r\n            if (refreshToken) {\r\n                try {\r\n                    const response = await axios.post('http://localhost:5118/api/Auth/refresh-token', {\r\n                        refreshToken: refreshToken,\r\n                    });\r\n\r\n                    // Lưu lại accessToken mới\r\n                    const newAccessToken = response.data.accessToken;\r\n                    localStorage.setItem('token', newAccessToken);\r\n\r\n                    // Cập nhật Authorization header với accessToken mới\r\n                    originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\r\n\r\n                    // Thử lại request với token mới\r\n                    return api(originalRequest);\r\n                } catch (err) {\r\n                    console.error('Failed to refresh token:', err);\r\n                    // Nếu không làm mới được token, chuyển hướng về trang đăng nhập\r\n                    window.location.href = '/login';\r\n                    return Promise.reject(error);\r\n                }\r\n            } else {\r\n                // Nếu không có refreshToken, chuyển hướng về trang đăng nhập\r\n                window.location.href = '/login';\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CACzBD,QAAQ,IAAIA,QAAQ,EACpB,MAAOE,KAAK,IAAK;EACb,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAM;;EAEpC;EACA,IAAIF,KAAK,CAACF,QAAQ,IAAIE,KAAK,CAACF,QAAQ,CAACK,MAAM,KAAK,GAAG,IAAI,CAACF,eAAe,CAACG,MAAM,EAAE;IAC5EH,eAAe,CAACG,MAAM,GAAG,IAAI;IAC7B,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;;IAEzD;IACA,IAAIF,YAAY,EAAE;MACd,IAAI;QACA,MAAMP,QAAQ,GAAG,MAAMN,KAAK,CAACgB,IAAI,CAAC,8CAA8C,EAAE;UAC9EH,YAAY,EAAEA;QAClB,CAAC,CAAC;;QAEF;QACA,MAAMI,cAAc,GAAGX,QAAQ,CAACY,IAAI,CAACC,WAAW;QAChDL,YAAY,CAACM,OAAO,CAAC,OAAO,EAAEH,cAAc,CAAC;;QAE7C;QACAR,eAAe,CAACL,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUa,cAAc,EAAE;;QAErE;QACA,OAAOhB,GAAG,CAACQ,eAAe,CAAC;MAC/B,CAAC,CAAC,OAAOY,GAAG,EAAE;QACVC,OAAO,CAACd,KAAK,CAAC,0BAA0B,EAAEa,GAAG,CAAC;QAC9C;QACAE,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;QAC/B,OAAOC,OAAO,CAACC,MAAM,CAACnB,KAAK,CAAC;MAChC;IACJ,CAAC,MAAM;MACH;MACAe,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MAC/B,OAAOC,OAAO,CAACC,MAAM,CAACnB,KAAK,CAAC;IAChC;EACJ;EAEA,OAAOkB,OAAO,CAACC,MAAM,CAACnB,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeP,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}